
I2C_ESP_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004320  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004514  08004514  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004514  08004514  00014514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800451c  0800451c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004530  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004530  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4eb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017bd  00000000  00000000  0002a527  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002bce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  0002c690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212ee  00000000  00000000  0002cf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080e6  00000000  00000000  0004e27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9eef  00000000  00000000  00056364  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f0  00000000  00000000  001202d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080044cc 	.word	0x080044cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080044cc 	.word	0x080044cc

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <HAL_Init+0x40>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_Init+0x40>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x40>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f92b 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 fe46 	bl	80041d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f943 	bl	8000802 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000594:	f000 f90b 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000030 	.word	0x20000030

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000030 	.word	0x20000030

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4907      	ldr	r1, [pc, #28]	; (8000694 <__NVIC_EnableIRQ+0x38>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff29 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff3e 	bl	8000640 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff8e 	bl	80006ec <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5d 	bl	8000698 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff31 	bl	800065c <__NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffa2 	bl	8000754 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b02      	cmp	r3, #2
 800082c:	d004      	beq.n	8000838 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e00c      	b.n	8000852 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2205      	movs	r2, #5
 800083c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f022 0201 	bic.w	r2, r2, #1
 800084e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800086c:	b2db      	uxtb	r3, r3
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
 8000896:	e165      	b.n	8000b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000898:	2201      	movs	r2, #1
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f040 8154 	bne.w	8000b5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d00b      	beq.n	80008d6 <HAL_GPIO_Init+0x5a>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d007      	beq.n	80008d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ca:	2b11      	cmp	r3, #17
 80008cc:	d003      	beq.n	80008d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d130      	bne.n	8000938 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090c:	2201      	movs	r2, #1
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	f003 0201 	and.w	r2, r3, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	2203      	movs	r2, #3
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4313      	orrs	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d003      	beq.n	8000978 <HAL_GPIO_Init+0xfc>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2b12      	cmp	r3, #18
 8000976:	d123      	bne.n	80009c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	08da      	lsrs	r2, r3, #3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3208      	adds	r2, #8
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	220f      	movs	r2, #15
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3208      	adds	r2, #8
 80009ba:	69b9      	ldr	r1, [r7, #24]
 80009bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0203 	and.w	r2, r3, #3
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 80ae 	beq.w	8000b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <HAL_GPIO_Init+0x2fc>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a5b      	ldr	r2, [pc, #364]	; (8000b78 <HAL_GPIO_Init+0x2fc>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <HAL_GPIO_Init+0x2fc>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a1e:	4a57      	ldr	r2, [pc, #348]	; (8000b7c <HAL_GPIO_Init+0x300>)
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4e      	ldr	r2, [pc, #312]	; (8000b80 <HAL_GPIO_Init+0x304>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d025      	beq.n	8000a96 <HAL_GPIO_Init+0x21a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4d      	ldr	r2, [pc, #308]	; (8000b84 <HAL_GPIO_Init+0x308>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d01f      	beq.n	8000a92 <HAL_GPIO_Init+0x216>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4c      	ldr	r2, [pc, #304]	; (8000b88 <HAL_GPIO_Init+0x30c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d019      	beq.n	8000a8e <HAL_GPIO_Init+0x212>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4b      	ldr	r2, [pc, #300]	; (8000b8c <HAL_GPIO_Init+0x310>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d013      	beq.n	8000a8a <HAL_GPIO_Init+0x20e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4a      	ldr	r2, [pc, #296]	; (8000b90 <HAL_GPIO_Init+0x314>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00d      	beq.n	8000a86 <HAL_GPIO_Init+0x20a>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a49      	ldr	r2, [pc, #292]	; (8000b94 <HAL_GPIO_Init+0x318>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d007      	beq.n	8000a82 <HAL_GPIO_Init+0x206>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <HAL_GPIO_Init+0x31c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_GPIO_Init+0x202>
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	e00c      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a7e:	2307      	movs	r3, #7
 8000a80:	e00a      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a82:	2305      	movs	r3, #5
 8000a84:	e008      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e004      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x21c>
 8000a96:	2300      	movs	r3, #0
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	f002 0203 	and.w	r2, r2, #3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4093      	lsls	r3, r2
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa8:	4934      	ldr	r1, [pc, #208]	; (8000b7c <HAL_GPIO_Init+0x300>)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ada:	4a30      	ldr	r2, [pc, #192]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b04:	4a25      	ldr	r2, [pc, #148]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b2e:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b58:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_GPIO_Init+0x320>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3301      	adds	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b0f      	cmp	r3, #15
 8000b68:	f67f ae96 	bls.w	8000898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3724      	adds	r7, #36	; 0x24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40021400 	.word	0x40021400
 8000b98:	40021800 	.word	0x40021800
 8000b9c:	40013c00 	.word	0x40013c00

08000ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]
 8000bac:	4613      	mov	r3, r2
 8000bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb0:	787b      	ldrb	r3, [r7, #1]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bbc:	e003      	b.n	8000bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	041a      	lsls	r2, r3, #16
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	619a      	str	r2, [r3, #24]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e11f      	b.n	8000e26 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d106      	bne.n	8000c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f003 fb18 	bl	8004230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2224      	movs	r2, #36	; 0x24
 8000c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0201 	bic.w	r2, r2, #1
 8000c16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c38:	f002 f84a 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8000c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a7b      	ldr	r2, [pc, #492]	; (8000e30 <HAL_I2C_Init+0x25c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d807      	bhi.n	8000c58 <HAL_I2C_Init+0x84>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4a7a      	ldr	r2, [pc, #488]	; (8000e34 <HAL_I2C_Init+0x260>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	bf94      	ite	ls
 8000c50:	2301      	movls	r3, #1
 8000c52:	2300      	movhi	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	e006      	b.n	8000c66 <HAL_I2C_Init+0x92>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4a77      	ldr	r2, [pc, #476]	; (8000e38 <HAL_I2C_Init+0x264>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	bf94      	ite	ls
 8000c60:	2301      	movls	r3, #1
 8000c62:	2300      	movhi	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e0db      	b.n	8000e26 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4a72      	ldr	r2, [pc, #456]	; (8000e3c <HAL_I2C_Init+0x268>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	0c9b      	lsrs	r3, r3, #18
 8000c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a64      	ldr	r2, [pc, #400]	; (8000e30 <HAL_I2C_Init+0x25c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d802      	bhi.n	8000ca8 <HAL_I2C_Init+0xd4>
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	e009      	b.n	8000cbc <HAL_I2C_Init+0xe8>
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	4a63      	ldr	r2, [pc, #396]	; (8000e40 <HAL_I2C_Init+0x26c>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	099b      	lsrs	r3, r3, #6
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4956      	ldr	r1, [pc, #344]	; (8000e30 <HAL_I2C_Init+0x25c>)
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d80d      	bhi.n	8000cf8 <HAL_I2C_Init+0x124>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	1e59      	subs	r1, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	bf38      	it	cc
 8000cf4:	2304      	movcc	r3, #4
 8000cf6:	e04f      	b.n	8000d98 <HAL_I2C_Init+0x1c4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d111      	bne.n	8000d24 <HAL_I2C_Init+0x150>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	1e58      	subs	r0, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	440b      	add	r3, r1
 8000d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d12:	3301      	adds	r3, #1
 8000d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf0c      	ite	eq
 8000d1c:	2301      	moveq	r3, #1
 8000d1e:	2300      	movne	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	e012      	b.n	8000d4a <HAL_I2C_Init+0x176>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	1e58      	subs	r0, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6859      	ldr	r1, [r3, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	0099      	lsls	r1, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_I2C_Init+0x17e>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e022      	b.n	8000d98 <HAL_I2C_Init+0x1c4>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10e      	bne.n	8000d78 <HAL_I2C_Init+0x1a4>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1e58      	subs	r0, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6859      	ldr	r1, [r3, #4]
 8000d62:	460b      	mov	r3, r1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	440b      	add	r3, r1
 8000d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d76:	e00f      	b.n	8000d98 <HAL_I2C_Init+0x1c4>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	1e58      	subs	r0, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6859      	ldr	r1, [r3, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	0099      	lsls	r1, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	6809      	ldr	r1, [r1, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69da      	ldr	r2, [r3, #28]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	431a      	orrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6911      	ldr	r1, [r2, #16]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68d2      	ldr	r2, [r2, #12]
 8000dd2:	4311      	orrs	r1, r2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2220      	movs	r2, #32
 8000e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	000186a0 	.word	0x000186a0
 8000e34:	001e847f 	.word	0x001e847f
 8000e38:	003d08ff 	.word	0x003d08ff
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	10624dd3 	.word	0x10624dd3

08000e44 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	4613      	mov	r3, r2
 8000e52:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff fbc4 	bl	80005e0 <HAL_GetTick>
 8000e58:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b20      	cmp	r3, #32
 8000e64:	f040 80fb 	bne.w	800105e <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <HAL_I2C_Slave_Transmit+0x30>
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e0f3      	b.n	8001060 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_I2C_Slave_Transmit+0x42>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e0ec      	b.n	8001060 <HAL_I2C_Slave_Transmit+0x21c>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d007      	beq.n	8000eac <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eba:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2221      	movs	r2, #33	; 0x21
 8000ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4a5f      	ldr	r2, [pc, #380]	; (8001068 <HAL_I2C_Slave_Transmit+0x224>)
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efc:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	4959      	ldr	r1, [pc, #356]	; (800106c <HAL_I2C_Slave_Transmit+0x228>)
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f001 fd0c 	bl	8002926 <I2C_WaitOnFlagUntilTimeout>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0a3      	b.n	8001060 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000f36:	d165      	bne.n	8001004 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	494a      	ldr	r1, [pc, #296]	; (800106c <HAL_I2C_Slave_Transmit+0x228>)
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f001 fcef 	bl	8002926 <I2C_WaitOnFlagUntilTimeout>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e086      	b.n	8001060 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000f68:	e04c      	b.n	8001004 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f001 fd30 	bl	80029d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f88:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e068      	b.n	8001060 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d11b      	bne.n	8001004 <HAL_I2C_Slave_Transmit+0x1c0>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d017      	beq.n	8001004 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1ae      	bne.n	8000f6a <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f001 fc84 	bl	8002926 <I2C_WaitOnFlagUntilTimeout>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e01b      	b.n	8001060 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001030:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2220      	movs	r2, #32
 8001046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800105e:	2302      	movs	r3, #2
  }
}
 8001060:	4618      	mov	r0, r3
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	ffff0000 	.word	0xffff0000
 800106c:	00010002 	.word	0x00010002

08001070 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b20      	cmp	r3, #32
 8001088:	d158      	bne.n	800113c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <HAL_I2C_Slave_Receive_IT+0x26>
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e051      	b.n	800113e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_I2C_Slave_Receive_IT+0x38>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e04a      	b.n	800113e <HAL_I2C_Slave_Receive_IT+0xce>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d007      	beq.n	80010ce <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 0201 	orr.w	r2, r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010dc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2222      	movs	r2, #34	; 0x22
 80010e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	88fa      	ldrh	r2, [r7, #6]
 80010fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001104:	b29a      	uxth	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_I2C_Slave_Receive_IT+0xdc>)
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800111e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001136:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	e000      	b.n	800113e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800113c:	2302      	movs	r3, #2
  }
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	ffff0000 	.word	0xffff0000

08001150 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001170:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001178:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b10      	cmp	r3, #16
 800117e:	d003      	beq.n	8001188 <HAL_I2C_EV_IRQHandler+0x38>
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b40      	cmp	r3, #64	; 0x40
 8001184:	f040 80b6 	bne.w	80012f4 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10d      	bne.n	80011be <HAL_I2C_EV_IRQHandler+0x6e>
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80011a8:	d003      	beq.n	80011b2 <HAL_I2C_EV_IRQHandler+0x62>
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80011b0:	d101      	bne.n	80011b6 <HAL_I2C_EV_IRQHandler+0x66>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_I2C_EV_IRQHandler+0x68>
 80011b6:	2300      	movs	r3, #0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f000 8127 	beq.w	800140c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00c      	beq.n	80011e2 <HAL_I2C_EV_IRQHandler+0x92>
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	0a5b      	lsrs	r3, r3, #9
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f001 fc6d 	bl	8002ab4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fd12 	bl	8001c04 <I2C_Master_SB>
 80011e0:	e087      	b.n	80012f2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <HAL_I2C_EV_IRQHandler+0xb2>
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	0a5b      	lsrs	r3, r3, #9
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fd88 	bl	8001d10 <I2C_Master_ADD10>
 8001200:	e077      	b.n	80012f2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <HAL_I2C_EV_IRQHandler+0xd2>
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	0a5b      	lsrs	r3, r3, #9
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fda2 	bl	8001d64 <I2C_Master_ADDR>
 8001220:	e067      	b.n	80012f2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d030      	beq.n	8001290 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800123c:	f000 80e8 	beq.w	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	09db      	lsrs	r3, r3, #7
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00f      	beq.n	800126c <HAL_I2C_EV_IRQHandler+0x11c>
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	0a9b      	lsrs	r3, r3, #10
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d009      	beq.n	800126c <HAL_I2C_EV_IRQHandler+0x11c>
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f9de 	bl	8001626 <I2C_MasterTransmit_TXE>
 800126a:	e042      	b.n	80012f2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80cb 	beq.w	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	0a5b      	lsrs	r3, r3, #9
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80c4 	beq.w	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fa68 	bl	800175e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800128e:	e0bf      	b.n	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800129a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800129e:	f000 80b7 	beq.w	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00f      	beq.n	80012ce <HAL_I2C_EV_IRQHandler+0x17e>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	0a9b      	lsrs	r3, r3, #10
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d009      	beq.n	80012ce <HAL_I2C_EV_IRQHandler+0x17e>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fb30 	bl	800192c <I2C_MasterReceive_RXNE>
 80012cc:	e011      	b.n	80012f2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 809a 	beq.w	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	0a5b      	lsrs	r3, r3, #9
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 8093 	beq.w	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fba0 	bl	8001a30 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80012f0:	e08e      	b.n	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
 80012f2:	e08d      	b.n	8001410 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	e007      	b.n	8001316 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	085b      	lsrs	r3, r3, #1
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d012      	beq.n	8001348 <HAL_I2C_EV_IRQHandler+0x1f8>
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	0a5b      	lsrs	r3, r3, #9
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00c      	beq.n	8001348 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 ff5e 	bl	8002202 <I2C_Slave_ADDR>
 8001346:	e066      	b.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d009      	beq.n	8001368 <HAL_I2C_EV_IRQHandler+0x218>
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	0a5b      	lsrs	r3, r3, #9
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 ff93 	bl	800228c <I2C_Slave_STOPF>
 8001366:	e056      	b.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	2b21      	cmp	r3, #33	; 0x21
 800136c:	d002      	beq.n	8001374 <HAL_I2C_EV_IRQHandler+0x224>
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	2b29      	cmp	r3, #41	; 0x29
 8001372:	d125      	bne.n	80013c0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	09db      	lsrs	r3, r3, #7
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00f      	beq.n	80013a0 <HAL_I2C_EV_IRQHandler+0x250>
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	0a9b      	lsrs	r3, r3, #10
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d009      	beq.n	80013a0 <HAL_I2C_EV_IRQHandler+0x250>
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 fe74 	bl	8002086 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800139e:	e039      	b.n	8001414 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d033      	beq.n	8001414 <HAL_I2C_EV_IRQHandler+0x2c4>
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	0a5b      	lsrs	r3, r3, #9
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d02d      	beq.n	8001414 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fea1 	bl	8002100 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013be:	e029      	b.n	8001414 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	099b      	lsrs	r3, r3, #6
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00f      	beq.n	80013ec <HAL_I2C_EV_IRQHandler+0x29c>
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	0a9b      	lsrs	r3, r3, #10
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <HAL_I2C_EV_IRQHandler+0x29c>
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d103      	bne.n	80013ec <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 feac 	bl	8002142 <I2C_SlaveReceive_RXNE>
 80013ea:	e014      	b.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00e      	beq.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	0a5b      	lsrs	r3, r3, #9
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 feda 	bl	80021be <I2C_SlaveReceive_BTF>
 800140a:	e004      	b.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800140c:	bf00      	nop
 800140e:	e002      	b.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001410:	bf00      	nop
 8001412:	e000      	b.n	8001416 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001414:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800143e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00e      	beq.n	800146a <HAL_I2C_ER_IRQHandler+0x4e>
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001468:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	0a5b      	lsrs	r3, r3, #9
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00e      	beq.n	8001494 <HAL_I2C_ER_IRQHandler+0x78>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001492:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	0a9b      	lsrs	r3, r3, #10
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d03f      	beq.n	8001520 <HAL_I2C_ER_IRQHandler+0x104>
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d039      	beq.n	8001520 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80014ac:	7efb      	ldrb	r3, [r7, #27]
 80014ae:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014be:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80014c6:	7ebb      	ldrb	r3, [r7, #26]
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	d112      	bne.n	80014f2 <HAL_I2C_ER_IRQHandler+0xd6>
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10f      	bne.n	80014f2 <HAL_I2C_ER_IRQHandler+0xd6>
 80014d2:	7cfb      	ldrb	r3, [r7, #19]
 80014d4:	2b21      	cmp	r3, #33	; 0x21
 80014d6:	d008      	beq.n	80014ea <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80014d8:	7cfb      	ldrb	r3, [r7, #19]
 80014da:	2b29      	cmp	r3, #41	; 0x29
 80014dc:	d005      	beq.n	80014ea <HAL_I2C_ER_IRQHandler+0xce>
 80014de:	7cfb      	ldrb	r3, [r7, #19]
 80014e0:	2b28      	cmp	r3, #40	; 0x28
 80014e2:	d106      	bne.n	80014f2 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b21      	cmp	r3, #33	; 0x21
 80014e8:	d103      	bne.n	80014f2 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fffe 	bl	80024ec <I2C_Slave_AF>
 80014f0:	e016      	b.n	8001520 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014fa:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001504:	7efb      	ldrb	r3, [r7, #27]
 8001506:	2b10      	cmp	r3, #16
 8001508:	d002      	beq.n	8001510 <HAL_I2C_ER_IRQHandler+0xf4>
 800150a:	7efb      	ldrb	r3, [r7, #27]
 800150c:	2b40      	cmp	r3, #64	; 0x40
 800150e:	d107      	bne.n	8001520 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800151e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	0adb      	lsrs	r3, r3, #11
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00e      	beq.n	800154a <HAL_I2C_ER_IRQHandler+0x12e>
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001548:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f001 f835 	bl	80025cc <I2C_ITError>
  }
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70fb      	strb	r3, [r7, #3]
 80015b2:	4613      	mov	r3, r2
 80015b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001634:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800163c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001648:	2b00      	cmp	r3, #0
 800164a:	d150      	bne.n	80016ee <I2C_MasterTransmit_TXE+0xc8>
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b21      	cmp	r3, #33	; 0x21
 8001650:	d14d      	bne.n	80016ee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d01d      	beq.n	8001694 <I2C_MasterTransmit_TXE+0x6e>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b20      	cmp	r3, #32
 800165c:	d01a      	beq.n	8001694 <I2C_MasterTransmit_TXE+0x6e>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001664:	d016      	beq.n	8001694 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001674:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2211      	movs	r2, #17
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff6c 	bl	800156a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001692:	e060      	b.n	8001756 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016a2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2220      	movs	r2, #32
 80016be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b40      	cmp	r3, #64	; 0x40
 80016cc:	d107      	bne.n	80016de <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff7d 	bl	80015d6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80016dc:	e03b      	b.n	8001756 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff3f 	bl	800156a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80016ec:	e033      	b.n	8001756 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b21      	cmp	r3, #33	; 0x21
 80016f2:	d005      	beq.n	8001700 <I2C_MasterTransmit_TXE+0xda>
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
 80016f6:	2b40      	cmp	r3, #64	; 0x40
 80016f8:	d12d      	bne.n	8001756 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b22      	cmp	r3, #34	; 0x22
 80016fe:	d12a      	bne.n	8001756 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d108      	bne.n	800171c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001718:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800171a:	e01c      	b.n	8001756 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d103      	bne.n	8001730 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f898 	bl	800185e <I2C_MemoryTransmit_TXE_BTF>
}
 800172e:	e012      	b.n	8001756 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001754:	e7ff      	b.n	8001756 <I2C_MasterTransmit_TXE+0x130>
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b21      	cmp	r3, #33	; 0x21
 8001776:	d165      	bne.n	8001844 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d012      	beq.n	80017a8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80017a6:	e056      	b.n	8001856 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d01d      	beq.n	80017ea <I2C_MasterTransmit_BTF+0x8c>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d01a      	beq.n	80017ea <I2C_MasterTransmit_BTF+0x8c>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017ba:	d016      	beq.n	80017ea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017ca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2211      	movs	r2, #17
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fec1 	bl	800156a <HAL_I2C_MasterTxCpltCallback>
}
 80017e8:	e035      	b.n	8001856 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80017f8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001808:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b40      	cmp	r3, #64	; 0x40
 8001822:	d107      	bne.n	8001834 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fed2 	bl	80015d6 <HAL_I2C_MemTxCpltCallback>
}
 8001832:	e010      	b.n	8001856 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fe94 	bl	800156a <HAL_I2C_MasterTxCpltCallback>
}
 8001842:	e008      	b.n	8001856 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b40      	cmp	r3, #64	; 0x40
 800184e:	d102      	bne.n	8001856 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f804 	bl	800185e <I2C_MemoryTransmit_TXE_BTF>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11d      	bne.n	80018aa <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10b      	bne.n	800188e <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001886:	1c9a      	adds	r2, r3, #2
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800188c:	e048      	b.n	8001920 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001892:	b29b      	uxth	r3, r3
 8001894:	121b      	asrs	r3, r3, #8
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018a8:	e03a      	b.n	8001920 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d10b      	bne.n	80018ca <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018c8:	e02a      	b.n	8001920 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d126      	bne.n	8001920 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b22      	cmp	r3, #34	; 0x22
 80018dc:	d108      	bne.n	80018f0 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	e017      	b.n	8001920 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b21      	cmp	r3, #33	; 0x21
 80018fa:	d111      	bne.n	8001920 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b22      	cmp	r3, #34	; 0x22
 800193e:	d173      	bne.n	8001a28 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d920      	bls.n	8001990 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	2b03      	cmp	r3, #3
 800197c:	d154      	bne.n	8001a28 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800198c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800198e:	e04b      	b.n	8001a28 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	2b02      	cmp	r3, #2
 8001996:	d047      	beq.n	8001a28 <I2C_MasterReceive_RXNE+0xfc>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d002      	beq.n	80019a4 <I2C_MasterReceive_RXNE+0x78>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d141      	bne.n	8001a28 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019c2:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b40      	cmp	r3, #64	; 0x40
 80019fc:	d10a      	bne.n	8001a14 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fdec 	bl	80015ea <HAL_I2C_MemRxCpltCallback>
}
 8001a12:	e009      	b.n	8001a28 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2212      	movs	r2, #18
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fdab 	bl	800157e <HAL_I2C_MasterRxCpltCallback>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d11b      	bne.n	8001a80 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a56:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001a7e:	e0bd      	b.n	8001bfc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d129      	bne.n	8001ade <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a98:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d00a      	beq.n	8001ab6 <I2C_MasterReceive_BTF+0x86>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d007      	beq.n	8001ab6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001adc:	e08e      	b.n	8001bfc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d176      	bne.n	8001bd6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d002      	beq.n	8001af4 <I2C_MasterReceive_BTF+0xc4>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d108      	bne.n	8001b06 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e019      	b.n	8001b3a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d002      	beq.n	8001b12 <I2C_MasterReceive_BTF+0xe2>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d108      	bne.n	8001b24 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e00a      	b.n	8001b3a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d007      	beq.n	8001b3a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b38:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b94:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b40      	cmp	r3, #64	; 0x40
 8001ba8:	d10a      	bne.n	8001bc0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fd16 	bl	80015ea <HAL_I2C_MemRxCpltCallback>
}
 8001bbe:	e01d      	b.n	8001bfc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2212      	movs	r2, #18
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fcd5 	bl	800157e <HAL_I2C_MasterRxCpltCallback>
}
 8001bd4:	e012      	b.n	8001bfc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b40      	cmp	r3, #64	; 0x40
 8001c16:	d117      	bne.n	8001c48 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c30:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001c32:	e067      	b.n	8001d04 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	611a      	str	r2, [r3, #16]
}
 8001c46:	e05d      	b.n	8001d04 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c50:	d133      	bne.n	8001cba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b21      	cmp	r3, #33	; 0x21
 8001c5c:	d109      	bne.n	8001c72 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	e008      	b.n	8001c84 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <I2C_Master_SB+0x92>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d108      	bne.n	8001ca8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d032      	beq.n	8001d04 <I2C_Master_SB+0x100>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d02d      	beq.n	8001d04 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cb6:	605a      	str	r2, [r3, #4]
}
 8001cb8:	e024      	b.n	8001d04 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	11db      	asrs	r3, r3, #7
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f003 0306 	and.w	r3, r3, #6
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f063 030f 	orn	r3, r3, #15
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	611a      	str	r2, [r3, #16]
}
 8001cde:	e011      	b.n	8001d04 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10d      	bne.n	8001d04 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	11db      	asrs	r3, r3, #7
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0306 	and.w	r3, r3, #6
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f063 030e 	orn	r3, r3, #14
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <I2C_Master_ADD10+0x24>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d011      	beq.n	8001d58 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <I2C_Master_ADD10+0x38>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d56:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b091      	sub	sp, #68	; 0x44
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b22      	cmp	r3, #34	; 0x22
 8001d8c:	f040 8169 	bne.w	8002062 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10f      	bne.n	8001db8 <I2C_Master_ADDR+0x54>
 8001d98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d9c:	2b40      	cmp	r3, #64	; 0x40
 8001d9e:	d10b      	bne.n	8001db8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da0:	2300      	movs	r3, #0
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	e160      	b.n	800207a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11d      	bne.n	8001dfc <I2C_Master_ADDR+0x98>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001dc8:	d118      	bne.n	8001dfc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	651a      	str	r2, [r3, #80]	; 0x50
 8001dfa:	e13e      	b.n	800207a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d113      	bne.n	8001e2e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e115      	b.n	800205a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 808a 	bne.w	8001f4e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e40:	d137      	bne.n	8001eb2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e50:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e60:	d113      	bne.n	8001e8a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e70:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	e0e7      	b.n	800205a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e0d3      	b.n	800205a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d02e      	beq.n	8001f16 <I2C_Master_ADDR+0x1b2>
 8001eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d02b      	beq.n	8001f16 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d102      	bne.n	8001eca <I2C_Master_ADDR+0x166>
 8001ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d125      	bne.n	8001f16 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d00e      	beq.n	8001eee <I2C_Master_ADDR+0x18a>
 8001ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d00b      	beq.n	8001eee <I2C_Master_ADDR+0x18a>
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d008      	beq.n	8001eee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e007      	b.n	8001efe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	e0a1      	b.n	800205a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f24:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e085      	b.n	800205a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d14d      	bne.n	8001ff4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d016      	beq.n	8001f8c <I2C_Master_ADDR+0x228>
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d013      	beq.n	8001f8c <I2C_Master_ADDR+0x228>
 8001f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d010      	beq.n	8001f8c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f78:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e007      	b.n	8001f9c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f9a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001faa:	d117      	bne.n	8001fdc <I2C_Master_ADDR+0x278>
 8001fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fb2:	d00b      	beq.n	8001fcc <I2C_Master_ADDR+0x268>
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d008      	beq.n	8001fcc <I2C_Master_ADDR+0x268>
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d005      	beq.n	8001fcc <I2C_Master_ADDR+0x268>
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d002      	beq.n	8001fcc <I2C_Master_ADDR+0x268>
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d107      	bne.n	8001fdc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fda:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	e032      	b.n	800205a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002002:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002012:	d117      	bne.n	8002044 <I2C_Master_ADDR+0x2e0>
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800201a:	d00b      	beq.n	8002034 <I2C_Master_ADDR+0x2d0>
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	2b01      	cmp	r3, #1
 8002020:	d008      	beq.n	8002034 <I2C_Master_ADDR+0x2d0>
 8002022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002024:	2b08      	cmp	r3, #8
 8002026:	d005      	beq.n	8002034 <I2C_Master_ADDR+0x2d0>
 8002028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202a:	2b10      	cmp	r3, #16
 800202c:	d002      	beq.n	8002034 <I2C_Master_ADDR+0x2d0>
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	2b20      	cmp	r3, #32
 8002032:	d107      	bne.n	8002044 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002042:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002060:	e00b      	b.n	800207a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	e7ff      	b.n	800207a <I2C_Master_ADDR+0x316>
 800207a:	bf00      	nop
 800207c:	3744      	adds	r7, #68	; 0x44
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002094:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d02b      	beq.n	80020f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d114      	bne.n	80020f8 <I2C_SlaveTransmit_TXE+0x72>
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b29      	cmp	r3, #41	; 0x29
 80020d2:	d111      	bne.n	80020f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2221      	movs	r2, #33	; 0x21
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2228      	movs	r2, #40	; 0x28
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fa4d 	bl	8001592 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d011      	beq.n	8002136 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02c      	beq.n	80021b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d114      	bne.n	80021b6 <I2C_SlaveReceive_RXNE+0x74>
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b2a      	cmp	r3, #42	; 0x2a
 8002190:	d111      	bne.n	80021b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2222      	movs	r2, #34	; 0x22
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2228      	movs	r2, #40	; 0x28
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f001 feef 	bl	8003f94 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800220c:	2300      	movs	r3, #0
 800220e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800221c:	2b28      	cmp	r3, #40	; 0x28
 800221e:	d127      	bne.n	8002270 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	09db      	lsrs	r3, r3, #7
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	81bb      	strh	r3, [r7, #12]
 8002252:	e002      	b.n	800225a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002262:	89ba      	ldrh	r2, [r7, #12]
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff f99c 	bl	80015a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800226e:	e008      	b.n	8002282 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0202 	mvn.w	r2, #2
 8002278:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e8:	d172      	bne.n	80023d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b22      	cmp	r3, #34	; 0x22
 80022ee:	d002      	beq.n	80022f6 <I2C_Slave_STOPF+0x6a>
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b2a      	cmp	r3, #42	; 0x2a
 80022f4:	d135      	bne.n	8002362 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002328:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fa95 	bl	800085e <HAL_DMA_GetState>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d049      	beq.n	80023ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <I2C_Slave_STOPF+0x258>)
 8002340:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fa67 	bl	800081a <HAL_DMA_Abort_IT>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d03d      	beq.n	80023ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800235c:	4610      	mov	r0, r2
 800235e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002360:	e035      	b.n	80023ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	b29a      	uxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f043 0204 	orr.w	r2, r3, #4
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002394:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fa5f 	bl	800085e <HAL_DMA_GetState>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d014      	beq.n	80023d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <I2C_Slave_STOPF+0x258>)
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fa31 	bl	800081a <HAL_DMA_Abort_IT>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023c8:	4610      	mov	r0, r2
 80023ca:	4798      	blx	r3
 80023cc:	e000      	b.n	80023d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80023ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d03e      	beq.n	8002458 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d112      	bne.n	800240e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d112      	bne.n	8002442 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8b3 	bl	80025cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002466:	e039      	b.n	80024dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b2a      	cmp	r3, #42	; 0x2a
 800246c:	d109      	bne.n	8002482 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2228      	movs	r2, #40	; 0x28
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f001 fd89 	bl	8003f94 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b28      	cmp	r3, #40	; 0x28
 800248c:	d111      	bne.n	80024b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <I2C_Slave_STOPF+0x25c>)
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff f889 	bl	80015c2 <HAL_I2C_ListenCpltCallback>
}
 80024b0:	e014      	b.n	80024dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	2b22      	cmp	r3, #34	; 0x22
 80024b8:	d002      	beq.n	80024c0 <I2C_Slave_STOPF+0x234>
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b22      	cmp	r3, #34	; 0x22
 80024be:	d10d      	bne.n	80024dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f001 fd5c 	bl	8003f94 <HAL_I2C_SlaveRxCpltCallback>
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	08002829 	.word	0x08002829
 80024e8:	ffff0000 	.word	0xffff0000

080024ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d002      	beq.n	800250e <I2C_Slave_AF+0x22>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b20      	cmp	r3, #32
 800250c:	d129      	bne.n	8002562 <I2C_Slave_AF+0x76>
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	2b28      	cmp	r3, #40	; 0x28
 8002512:	d126      	bne.n	8002562 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <I2C_Slave_AF+0xdc>)
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002528:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002532:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff f831 	bl	80015c2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002560:	e02e      	b.n	80025c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b21      	cmp	r3, #33	; 0x21
 8002566:	d126      	bne.n	80025b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <I2C_Slave_AF+0xdc>)
 800256c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2221      	movs	r2, #33	; 0x21
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002592:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800259c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe ffef 	bl	8001592 <HAL_I2C_SlaveTxCpltCallback>
}
 80025b4:	e004      	b.n	80025c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025be:	615a      	str	r2, [r3, #20]
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d10a      	bne.n	80025fe <I2C_ITError+0x32>
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b22      	cmp	r3, #34	; 0x22
 80025ec:	d107      	bne.n	80025fe <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002604:	2b28      	cmp	r3, #40	; 0x28
 8002606:	d107      	bne.n	8002618 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2228      	movs	r2, #40	; 0x28
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002616:	e015      	b.n	8002644 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002626:	d006      	beq.n	8002636 <I2C_ITError+0x6a>
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b60      	cmp	r3, #96	; 0x60
 800262c:	d003      	beq.n	8002636 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002652:	d162      	bne.n	800271a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002662:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d020      	beq.n	80026b4 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002676:	4a6a      	ldr	r2, [pc, #424]	; (8002820 <I2C_ITError+0x254>)
 8002678:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe f8cb 	bl	800081a <HAL_DMA_Abort_IT>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8089 	beq.w	800279e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0201 	bic.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026ae:	4610      	mov	r0, r2
 80026b0:	4798      	blx	r3
 80026b2:	e074      	b.n	800279e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	4a59      	ldr	r2, [pc, #356]	; (8002820 <I2C_ITError+0x254>)
 80026ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe f8aa 	bl	800081a <HAL_DMA_Abort_IT>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d068      	beq.n	800279e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d10b      	bne.n	80026f2 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002714:	4610      	mov	r0, r2
 8002716:	4798      	blx	r3
 8002718:	e041      	b.n	800279e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b60      	cmp	r3, #96	; 0x60
 8002724:	d125      	bne.n	8002772 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d10b      	bne.n	800275a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe ff51 	bl	8001612 <HAL_I2C_AbortCpltCallback>
 8002770:	e015      	b.n	800279e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d10b      	bne.n	8002798 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7fe ff30 	bl	80015fe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d113      	bne.n	8002818 <I2C_ITError+0x24c>
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b28      	cmp	r3, #40	; 0x28
 80027f4:	d110      	bne.n	8002818 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <I2C_ITError+0x258>)
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fed5 	bl	80015c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	08002829 	.word	0x08002829
 8002824:	ffff0000 	.word	0xffff0000

08002828 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	2200      	movs	r2, #0
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	2200      	movs	r2, #0
 800285c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	2200      	movs	r2, #0
 8002882:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	2200      	movs	r2, #0
 8002892:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b60      	cmp	r3, #96	; 0x60
 80028ae:	d10e      	bne.n	80028ce <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7fe fea3 	bl	8001612 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028cc:	e027      	b.n	800291e <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028d4:	2b28      	cmp	r3, #40	; 0x28
 80028d6:	d117      	bne.n	8002908 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2228      	movs	r2, #40	; 0x28
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002906:	e007      	b.n	8002918 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7fe fe70 	bl	80015fe <HAL_I2C_ErrorCallback>
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002936:	e025      	b.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293e:	d021      	beq.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002940:	f7fd fe4e 	bl	80005e0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e023      	b.n	80029cc <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d10d      	bne.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x84>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	43da      	mvns	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	e00c      	b.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4013      	ands	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d0b6      	beq.n	8002938 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e0:	e02d      	b.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f837 	bl	8002a56 <I2C_IsAcknowledgeFailed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02d      	b.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f8:	d021      	beq.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fd fdf1 	bl	80005e0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d116      	bne.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e007      	b.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d1ca      	bne.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6c:	d11b      	bne.n	8002aa6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ac4:	d103      	bne.n	8002ace <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002acc:	e007      	b.n	8002ade <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ad6:	d102      	bne.n	8002ade <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2208      	movs	r2, #8
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cc      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d90c      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d044      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d119      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e067      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4934      	ldr	r1, [pc, #208]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fd fd00 	bl	80005e0 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fd fcfc 	bl	80005e0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e04f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d20c      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f855 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002c76:	4601      	mov	r1, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	5cd3      	ldrb	r3, [r2, r3]
 8002c86:	fa21 f303 	lsr.w	r3, r1, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc60 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	080044fc 	.word	0x080044fc
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd4:	f7ff fff0 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0a9b      	lsrs	r3, r3, #10
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	0800450c 	.word	0x0800450c

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cfc:	f7ff ffdc 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002d00:	4601      	mov	r1, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0b5b      	lsrs	r3, r3, #13
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	0800450c 	.word	0x0800450c

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d3a:	4bc6      	ldr	r3, [pc, #792]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	f200 817e 	bhi.w	8003044 <HAL_RCC_GetSysClockFreq+0x324>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <HAL_RCC_GetSysClockFreq+0x30>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	08003045 	.word	0x08003045
 8002d58:	08003045 	.word	0x08003045
 8002d5c:	08003045 	.word	0x08003045
 8002d60:	08002d8b 	.word	0x08002d8b
 8002d64:	08003045 	.word	0x08003045
 8002d68:	08003045 	.word	0x08003045
 8002d6c:	08003045 	.word	0x08003045
 8002d70:	08002d91 	.word	0x08002d91
 8002d74:	08003045 	.word	0x08003045
 8002d78:	08003045 	.word	0x08003045
 8002d7c:	08003045 	.word	0x08003045
 8002d80:	08002eed 	.word	0x08002eed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4bb4      	ldr	r3, [pc, #720]	; (8003058 <HAL_RCC_GetSysClockFreq+0x338>)
 8002d86:	613b      	str	r3, [r7, #16]
       break;
 8002d88:	e15f      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d8a:	4bb4      	ldr	r3, [pc, #720]	; (800305c <HAL_RCC_GetSysClockFreq+0x33c>)
 8002d8c:	613b      	str	r3, [r7, #16]
      break;
 8002d8e:	e15c      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d90:	4bb0      	ldr	r3, [pc, #704]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d98:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d9a:	4bae      	ldr	r3, [pc, #696]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d04a      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da6:	4bab      	ldr	r3, [pc, #684]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	ea03 0501 	and.w	r5, r3, r1
 8002dbc:	ea04 0602 	and.w	r6, r4, r2
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4632      	mov	r2, r6
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	f04f 0400 	mov.w	r4, #0
 8002dcc:	0154      	lsls	r4, r2, #5
 8002dce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dd2:	014b      	lsls	r3, r1, #5
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	1b49      	subs	r1, r1, r5
 8002dda:	eb62 0206 	sbc.w	r2, r2, r6
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	f04f 0400 	mov.w	r4, #0
 8002de6:	0194      	lsls	r4, r2, #6
 8002de8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dec:	018b      	lsls	r3, r1, #6
 8002dee:	1a5b      	subs	r3, r3, r1
 8002df0:	eb64 0402 	sbc.w	r4, r4, r2
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	00e2      	lsls	r2, r4, #3
 8002dfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e02:	00d9      	lsls	r1, r3, #3
 8002e04:	460b      	mov	r3, r1
 8002e06:	4614      	mov	r4, r2
 8002e08:	195b      	adds	r3, r3, r5
 8002e0a:	eb44 0406 	adc.w	r4, r4, r6
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	0262      	lsls	r2, r4, #9
 8002e18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e1c:	0259      	lsls	r1, r3, #9
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	4621      	mov	r1, r4
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f04f 0400 	mov.w	r4, #0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	f7fd f9f0 	bl	8000214 <__aeabi_uldivmod>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e049      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3c:	4b85      	ldr	r3, [pc, #532]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	f04f 0400 	mov.w	r4, #0
 8002e46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	ea03 0501 	and.w	r5, r3, r1
 8002e52:	ea04 0602 	and.w	r6, r4, r2
 8002e56:	4629      	mov	r1, r5
 8002e58:	4632      	mov	r2, r6
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	0154      	lsls	r4, r2, #5
 8002e64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e68:	014b      	lsls	r3, r1, #5
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4622      	mov	r2, r4
 8002e6e:	1b49      	subs	r1, r1, r5
 8002e70:	eb62 0206 	sbc.w	r2, r2, r6
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	f04f 0400 	mov.w	r4, #0
 8002e7c:	0194      	lsls	r4, r2, #6
 8002e7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e82:	018b      	lsls	r3, r1, #6
 8002e84:	1a5b      	subs	r3, r3, r1
 8002e86:	eb64 0402 	sbc.w	r4, r4, r2
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	00e2      	lsls	r2, r4, #3
 8002e94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e98:	00d9      	lsls	r1, r3, #3
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	195b      	adds	r3, r3, r5
 8002ea0:	eb44 0406 	adc.w	r4, r4, r6
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	02a2      	lsls	r2, r4, #10
 8002eae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002eb2:	0299      	lsls	r1, r3, #10
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4614      	mov	r4, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	4621      	mov	r1, r4
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f04f 0400 	mov.w	r4, #0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	f7fd f9a5 	bl	8000214 <__aeabi_uldivmod>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	460c      	mov	r4, r1
 8002ece:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed0:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	3301      	adds	r3, #1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	613b      	str	r3, [r7, #16]
      break;
 8002eea:	e0ae      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef6:	4b57      	ldr	r3, [pc, #348]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d04a      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	ea03 0501 	and.w	r5, r3, r1
 8002f18:	ea04 0602 	and.w	r6, r4, r2
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	4632      	mov	r2, r6
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	f04f 0400 	mov.w	r4, #0
 8002f28:	0154      	lsls	r4, r2, #5
 8002f2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f2e:	014b      	lsls	r3, r1, #5
 8002f30:	4619      	mov	r1, r3
 8002f32:	4622      	mov	r2, r4
 8002f34:	1b49      	subs	r1, r1, r5
 8002f36:	eb62 0206 	sbc.w	r2, r2, r6
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	0194      	lsls	r4, r2, #6
 8002f44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f48:	018b      	lsls	r3, r1, #6
 8002f4a:	1a5b      	subs	r3, r3, r1
 8002f4c:	eb64 0402 	sbc.w	r4, r4, r2
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	00e2      	lsls	r2, r4, #3
 8002f5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f5e:	00d9      	lsls	r1, r3, #3
 8002f60:	460b      	mov	r3, r1
 8002f62:	4614      	mov	r4, r2
 8002f64:	195b      	adds	r3, r3, r5
 8002f66:	eb44 0406 	adc.w	r4, r4, r6
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	0262      	lsls	r2, r4, #9
 8002f74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f78:	0259      	lsls	r1, r3, #9
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	4621      	mov	r1, r4
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f04f 0400 	mov.w	r4, #0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	f7fd f942 	bl	8000214 <__aeabi_uldivmod>
 8002f90:	4603      	mov	r3, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e049      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	f04f 0400 	mov.w	r4, #0
 8002fa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	ea03 0501 	and.w	r5, r3, r1
 8002fae:	ea04 0602 	and.w	r6, r4, r2
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4632      	mov	r2, r6
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	f04f 0400 	mov.w	r4, #0
 8002fbe:	0154      	lsls	r4, r2, #5
 8002fc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fc4:	014b      	lsls	r3, r1, #5
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4622      	mov	r2, r4
 8002fca:	1b49      	subs	r1, r1, r5
 8002fcc:	eb62 0206 	sbc.w	r2, r2, r6
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f04f 0400 	mov.w	r4, #0
 8002fd8:	0194      	lsls	r4, r2, #6
 8002fda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fde:	018b      	lsls	r3, r1, #6
 8002fe0:	1a5b      	subs	r3, r3, r1
 8002fe2:	eb64 0402 	sbc.w	r4, r4, r2
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	00e2      	lsls	r2, r4, #3
 8002ff0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ff4:	00d9      	lsls	r1, r3, #3
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	195b      	adds	r3, r3, r5
 8002ffc:	eb44 0406 	adc.w	r4, r4, r6
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	02a2      	lsls	r2, r4, #10
 800300a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800300e:	0299      	lsls	r1, r3, #10
 8003010:	460b      	mov	r3, r1
 8003012:	4614      	mov	r4, r2
 8003014:	4618      	mov	r0, r3
 8003016:	4621      	mov	r1, r4
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f04f 0400 	mov.w	r4, #0
 800301e:	461a      	mov	r2, r3
 8003020:	4623      	mov	r3, r4
 8003022:	f7fd f8f7 	bl	8000214 <__aeabi_uldivmod>
 8003026:	4603      	mov	r3, r0
 8003028:	460c      	mov	r4, r1
 800302a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <HAL_RCC_GetSysClockFreq+0x334>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0f1b      	lsrs	r3, r3, #28
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	613b      	str	r3, [r7, #16]
      break;
 8003042:	e002      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCC_GetSysClockFreq+0x338>)
 8003046:	613b      	str	r3, [r7, #16]
      break;
 8003048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304a:	693b      	ldr	r3, [r7, #16]
}
 800304c:	4618      	mov	r0, r3
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	00f42400 	.word	0x00f42400
 800305c:	007a1200 	.word	0x007a1200

08003060 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8083 	beq.w	8003180 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800307a:	4b95      	ldr	r3, [pc, #596]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003086:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800308e:	2b08      	cmp	r3, #8
 8003090:	d106      	bne.n	80030a0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003092:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309e:	d00c      	beq.n	80030ba <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a0:	4b8b      	ldr	r3, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ac:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d05b      	beq.n	800317e <HAL_RCC_OscConfig+0x11e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d157      	bne.n	800317e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e216      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x8a>
 80030dc:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a7b      	ldr	r2, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e01d      	b.n	8003126 <HAL_RCC_OscConfig+0xc6>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0xae>
 80030f4:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e00b      	b.n	8003126 <HAL_RCC_OscConfig+0xc6>
 800310e:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6f      	ldr	r2, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6c      	ldr	r2, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fd fa57 	bl	80005e0 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003136:	f7fd fa53 	bl	80005e0 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1db      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003148:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0xd6>
 8003154:	e014      	b.n	8003180 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fd fa43 	bl	80005e0 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315e:	f7fd fa3f 	bl	80005e0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b64      	cmp	r3, #100	; 0x64
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1c7      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003170:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0xfe>
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d06f      	beq.n	800326c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b00      	cmp	r3, #0
 8003196:	d017      	beq.n	80031c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031a4:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b0:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d11c      	bne.n	80031f6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031bc:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d116      	bne.n	80031f6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_OscConfig+0x180>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e18f      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4938      	ldr	r1, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f4:	e03a      	b.n	800326c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d020      	beq.n	8003240 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031fe:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fd f9ec 	bl	80005e0 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320c:	f7fd f9e8 	bl	80005e0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e170      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4925      	ldr	r1, [pc, #148]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
 800323e:	e015      	b.n	800326c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fd f9cb 	bl	80005e0 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd f9c7 	bl	80005e0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e14f      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d037      	beq.n	80032e8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x278>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003286:	f7fd f9ab 	bl	80005e0 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328e:	f7fd f9a7 	bl	80005e0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e12f      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80032a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x22e>
 80032ac:	e01c      	b.n	80032e8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ae:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_RCC_OscConfig+0x278>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fd f994 	bl	80005e0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ba:	e00f      	b.n	80032dc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032bc:	f7fd f990 	bl	80005e0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d908      	bls.n	80032dc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e118      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	42470000 	.word	0x42470000
 80032d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b8a      	ldr	r3, [pc, #552]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e9      	bne.n	80032bc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8097 	beq.w	8003424 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b83      	ldr	r3, [pc, #524]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a7e      	ldr	r2, [pc, #504]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b7c      	ldr	r3, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b79      	ldr	r3, [pc, #484]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d118      	bne.n	8003364 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003332:	4b76      	ldr	r3, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a75      	ldr	r2, [pc, #468]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333e:	f7fd f94f 	bl	80005e0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7fd f94b 	bl	80005e0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0d3      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4b6c      	ldr	r3, [pc, #432]	; (800350c <HAL_RCC_OscConfig+0x4ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x31a>
 800336c:	4b66      	ldr	r3, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e01c      	b.n	80033b4 <HAL_RCC_OscConfig+0x354>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x33c>
 8003382:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a60      	ldr	r2, [pc, #384]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a5d      	ldr	r2, [pc, #372]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0x354>
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a59      	ldr	r2, [pc, #356]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	4b57      	ldr	r3, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a56      	ldr	r2, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80033ae:	f023 0304 	bic.w	r3, r3, #4
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd f910 	bl	80005e0 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fd f90c 	bl	80005e0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e092      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033da:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ee      	beq.n	80033c4 <HAL_RCC_OscConfig+0x364>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd f8fa 	bl	80005e0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fd f8f6 	bl	80005e0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e07c      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003406:	4b40      	ldr	r3, [pc, #256]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ee      	bne.n	80033f0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d068      	beq.n	80034fe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d060      	beq.n	80034fa <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d145      	bne.n	80034cc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003440:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x4b0>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fd f8cb 	bl	80005e0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344e:	f7fd f8c7 	bl	80005e0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e04f      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f0      	bne.n	800344e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	019b      	lsls	r3, r3, #6
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	3b01      	subs	r3, #1
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	071b      	lsls	r3, r3, #28
 8003498:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <HAL_RCC_OscConfig+0x4b0>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd f89c 	bl	80005e0 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fd f898 	bl	80005e0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e020      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x44c>
 80034ca:	e018      	b.n	80034fe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x4b0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d2:	f7fd f885 	bl	80005e0 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034da:	f7fd f881 	bl	80005e0 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e009      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x4a8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCC_OscConfig+0x47a>
 80034f8:	e001      	b.n	80034fe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
 8003510:	42470060 	.word	0x42470060

08003514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e03f      	b.n	80035a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fed0 	bl	80042e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	; 0x24
 8003544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f90b 	bl	8003774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800357c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800358c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af02      	add	r7, sp, #8
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	f040 8083 	bne.w	80036d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Transmit+0x2e>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e07b      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Transmit+0x40>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e074      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2221      	movs	r2, #33	; 0x21
 8003600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003604:	f7fc ffec 	bl	80005e0 <HAL_GetTick>
 8003608:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800361e:	e042      	b.n	80036a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	d122      	bne.n	800367e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2200      	movs	r2, #0
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f84c 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e042      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3302      	adds	r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	e017      	b.n	80036a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	e013      	b.n	80036a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f829 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e01f      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	60ba      	str	r2, [r7, #8]
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1b7      	bne.n	8003620 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f810 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e006      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	e02c      	b.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f8:	d028      	beq.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0x30>
 8003700:	f7fc ff6e 	bl	80005e0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d21d      	bcs.n	800374c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800371e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e00f      	b.n	800376c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	429a      	cmp	r2, r3
 8003768:	d0c3      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037b6:	f023 030c 	bic.w	r3, r3, #12
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e2:	f040 818b 	bne.w	8003afc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4ac1      	ldr	r2, [pc, #772]	; (8003af0 <UART_SetConfig+0x37c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d005      	beq.n	80037fc <UART_SetConfig+0x88>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4abf      	ldr	r2, [pc, #764]	; (8003af4 <UART_SetConfig+0x380>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f040 80bd 	bne.w	8003976 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037fc:	f7ff fa7c 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003800:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	461d      	mov	r5, r3
 8003806:	f04f 0600 	mov.w	r6, #0
 800380a:	46a8      	mov	r8, r5
 800380c:	46b1      	mov	r9, r6
 800380e:	eb18 0308 	adds.w	r3, r8, r8
 8003812:	eb49 0409 	adc.w	r4, r9, r9
 8003816:	4698      	mov	r8, r3
 8003818:	46a1      	mov	r9, r4
 800381a:	eb18 0805 	adds.w	r8, r8, r5
 800381e:	eb49 0906 	adc.w	r9, r9, r6
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800382e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003832:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003836:	4688      	mov	r8, r1
 8003838:	4691      	mov	r9, r2
 800383a:	eb18 0005 	adds.w	r0, r8, r5
 800383e:	eb49 0106 	adc.w	r1, r9, r6
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	461d      	mov	r5, r3
 8003848:	f04f 0600 	mov.w	r6, #0
 800384c:	196b      	adds	r3, r5, r5
 800384e:	eb46 0406 	adc.w	r4, r6, r6
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	f7fc fcdd 	bl	8000214 <__aeabi_uldivmod>
 800385a:	4603      	mov	r3, r0
 800385c:	460c      	mov	r4, r1
 800385e:	461a      	mov	r2, r3
 8003860:	4ba5      	ldr	r3, [pc, #660]	; (8003af8 <UART_SetConfig+0x384>)
 8003862:	fba3 2302 	umull	r2, r3, r3, r2
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	461d      	mov	r5, r3
 8003870:	f04f 0600 	mov.w	r6, #0
 8003874:	46a9      	mov	r9, r5
 8003876:	46b2      	mov	sl, r6
 8003878:	eb19 0309 	adds.w	r3, r9, r9
 800387c:	eb4a 040a 	adc.w	r4, sl, sl
 8003880:	4699      	mov	r9, r3
 8003882:	46a2      	mov	sl, r4
 8003884:	eb19 0905 	adds.w	r9, r9, r5
 8003888:	eb4a 0a06 	adc.w	sl, sl, r6
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003898:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800389c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038a0:	4689      	mov	r9, r1
 80038a2:	4692      	mov	sl, r2
 80038a4:	eb19 0005 	adds.w	r0, r9, r5
 80038a8:	eb4a 0106 	adc.w	r1, sl, r6
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	461d      	mov	r5, r3
 80038b2:	f04f 0600 	mov.w	r6, #0
 80038b6:	196b      	adds	r3, r5, r5
 80038b8:	eb46 0406 	adc.w	r4, r6, r6
 80038bc:	461a      	mov	r2, r3
 80038be:	4623      	mov	r3, r4
 80038c0:	f7fc fca8 	bl	8000214 <__aeabi_uldivmod>
 80038c4:	4603      	mov	r3, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b8b      	ldr	r3, [pc, #556]	; (8003af8 <UART_SetConfig+0x384>)
 80038cc:	fba3 1302 	umull	r1, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	2164      	movs	r1, #100	; 0x64
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	3332      	adds	r3, #50	; 0x32
 80038de:	4a86      	ldr	r2, [pc, #536]	; (8003af8 <UART_SetConfig+0x384>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038ec:	4498      	add	r8, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	461d      	mov	r5, r3
 80038f2:	f04f 0600 	mov.w	r6, #0
 80038f6:	46a9      	mov	r9, r5
 80038f8:	46b2      	mov	sl, r6
 80038fa:	eb19 0309 	adds.w	r3, r9, r9
 80038fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003902:	4699      	mov	r9, r3
 8003904:	46a2      	mov	sl, r4
 8003906:	eb19 0905 	adds.w	r9, r9, r5
 800390a:	eb4a 0a06 	adc.w	sl, sl, r6
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800391a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800391e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003922:	4689      	mov	r9, r1
 8003924:	4692      	mov	sl, r2
 8003926:	eb19 0005 	adds.w	r0, r9, r5
 800392a:	eb4a 0106 	adc.w	r1, sl, r6
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	461d      	mov	r5, r3
 8003934:	f04f 0600 	mov.w	r6, #0
 8003938:	196b      	adds	r3, r5, r5
 800393a:	eb46 0406 	adc.w	r4, r6, r6
 800393e:	461a      	mov	r2, r3
 8003940:	4623      	mov	r3, r4
 8003942:	f7fc fc67 	bl	8000214 <__aeabi_uldivmod>
 8003946:	4603      	mov	r3, r0
 8003948:	460c      	mov	r4, r1
 800394a:	461a      	mov	r2, r3
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <UART_SetConfig+0x384>)
 800394e:	fba3 1302 	umull	r1, r3, r3, r2
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2164      	movs	r1, #100	; 0x64
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	3332      	adds	r3, #50	; 0x32
 8003960:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <UART_SetConfig+0x384>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	f003 0207 	and.w	r2, r3, #7
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4442      	add	r2, r8
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	e26f      	b.n	8003e56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003976:	f7ff f9ab 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 800397a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	461d      	mov	r5, r3
 8003980:	f04f 0600 	mov.w	r6, #0
 8003984:	46a8      	mov	r8, r5
 8003986:	46b1      	mov	r9, r6
 8003988:	eb18 0308 	adds.w	r3, r8, r8
 800398c:	eb49 0409 	adc.w	r4, r9, r9
 8003990:	4698      	mov	r8, r3
 8003992:	46a1      	mov	r9, r4
 8003994:	eb18 0805 	adds.w	r8, r8, r5
 8003998:	eb49 0906 	adc.w	r9, r9, r6
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039b0:	4688      	mov	r8, r1
 80039b2:	4691      	mov	r9, r2
 80039b4:	eb18 0005 	adds.w	r0, r8, r5
 80039b8:	eb49 0106 	adc.w	r1, r9, r6
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	461d      	mov	r5, r3
 80039c2:	f04f 0600 	mov.w	r6, #0
 80039c6:	196b      	adds	r3, r5, r5
 80039c8:	eb46 0406 	adc.w	r4, r6, r6
 80039cc:	461a      	mov	r2, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	f7fc fc20 	bl	8000214 <__aeabi_uldivmod>
 80039d4:	4603      	mov	r3, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	461a      	mov	r2, r3
 80039da:	4b47      	ldr	r3, [pc, #284]	; (8003af8 <UART_SetConfig+0x384>)
 80039dc:	fba3 2302 	umull	r2, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	461d      	mov	r5, r3
 80039ea:	f04f 0600 	mov.w	r6, #0
 80039ee:	46a9      	mov	r9, r5
 80039f0:	46b2      	mov	sl, r6
 80039f2:	eb19 0309 	adds.w	r3, r9, r9
 80039f6:	eb4a 040a 	adc.w	r4, sl, sl
 80039fa:	4699      	mov	r9, r3
 80039fc:	46a2      	mov	sl, r4
 80039fe:	eb19 0905 	adds.w	r9, r9, r5
 8003a02:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a1a:	4689      	mov	r9, r1
 8003a1c:	4692      	mov	sl, r2
 8003a1e:	eb19 0005 	adds.w	r0, r9, r5
 8003a22:	eb4a 0106 	adc.w	r1, sl, r6
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	f04f 0600 	mov.w	r6, #0
 8003a30:	196b      	adds	r3, r5, r5
 8003a32:	eb46 0406 	adc.w	r4, r6, r6
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	f7fc fbeb 	bl	8000214 <__aeabi_uldivmod>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <UART_SetConfig+0x384>)
 8003a46:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2164      	movs	r1, #100	; 0x64
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <UART_SetConfig+0x384>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a66:	4498      	add	r8, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	f04f 0600 	mov.w	r6, #0
 8003a70:	46a9      	mov	r9, r5
 8003a72:	46b2      	mov	sl, r6
 8003a74:	eb19 0309 	adds.w	r3, r9, r9
 8003a78:	eb4a 040a 	adc.w	r4, sl, sl
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	46a2      	mov	sl, r4
 8003a80:	eb19 0905 	adds.w	r9, r9, r5
 8003a84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a9c:	4689      	mov	r9, r1
 8003a9e:	4692      	mov	sl, r2
 8003aa0:	eb19 0005 	adds.w	r0, r9, r5
 8003aa4:	eb4a 0106 	adc.w	r1, sl, r6
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	461d      	mov	r5, r3
 8003aae:	f04f 0600 	mov.w	r6, #0
 8003ab2:	196b      	adds	r3, r5, r5
 8003ab4:	eb46 0406 	adc.w	r4, r6, r6
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7fc fbaa 	bl	8000214 <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <UART_SetConfig+0x384>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2164      	movs	r1, #100	; 0x64
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	3332      	adds	r3, #50	; 0x32
 8003ada:	4a07      	ldr	r2, [pc, #28]	; (8003af8 <UART_SetConfig+0x384>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	f003 0207 	and.w	r2, r3, #7
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4442      	add	r2, r8
 8003aec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003aee:	e1b2      	b.n	8003e56 <UART_SetConfig+0x6e2>
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40011400 	.word	0x40011400
 8003af8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4ad7      	ldr	r2, [pc, #860]	; (8003e60 <UART_SetConfig+0x6ec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d005      	beq.n	8003b12 <UART_SetConfig+0x39e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4ad6      	ldr	r2, [pc, #856]	; (8003e64 <UART_SetConfig+0x6f0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f040 80d1 	bne.w	8003cb4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b12:	f7ff f8f1 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003b16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	469a      	mov	sl, r3
 8003b1c:	f04f 0b00 	mov.w	fp, #0
 8003b20:	46d0      	mov	r8, sl
 8003b22:	46d9      	mov	r9, fp
 8003b24:	eb18 0308 	adds.w	r3, r8, r8
 8003b28:	eb49 0409 	adc.w	r4, r9, r9
 8003b2c:	4698      	mov	r8, r3
 8003b2e:	46a1      	mov	r9, r4
 8003b30:	eb18 080a 	adds.w	r8, r8, sl
 8003b34:	eb49 090b 	adc.w	r9, r9, fp
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b4c:	4688      	mov	r8, r1
 8003b4e:	4691      	mov	r9, r2
 8003b50:	eb1a 0508 	adds.w	r5, sl, r8
 8003b54:	eb4b 0609 	adc.w	r6, fp, r9
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	0094      	lsls	r4, r2, #2
 8003b6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b70:	008b      	lsls	r3, r1, #2
 8003b72:	461a      	mov	r2, r3
 8003b74:	4623      	mov	r3, r4
 8003b76:	4628      	mov	r0, r5
 8003b78:	4631      	mov	r1, r6
 8003b7a:	f7fc fb4b 	bl	8000214 <__aeabi_uldivmod>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	461a      	mov	r2, r3
 8003b84:	4bb8      	ldr	r3, [pc, #736]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	469b      	mov	fp, r3
 8003b94:	f04f 0c00 	mov.w	ip, #0
 8003b98:	46d9      	mov	r9, fp
 8003b9a:	46e2      	mov	sl, ip
 8003b9c:	eb19 0309 	adds.w	r3, r9, r9
 8003ba0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ba4:	4699      	mov	r9, r3
 8003ba6:	46a2      	mov	sl, r4
 8003ba8:	eb19 090b 	adds.w	r9, r9, fp
 8003bac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bc4:	4689      	mov	r9, r1
 8003bc6:	4692      	mov	sl, r2
 8003bc8:	eb1b 0509 	adds.w	r5, fp, r9
 8003bcc:	eb4c 060a 	adc.w	r6, ip, sl
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	f04f 0400 	mov.w	r4, #0
 8003be2:	0094      	lsls	r4, r2, #2
 8003be4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be8:	008b      	lsls	r3, r1, #2
 8003bea:	461a      	mov	r2, r3
 8003bec:	4623      	mov	r3, r4
 8003bee:	4628      	mov	r0, r5
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	f7fc fb0f 	bl	8000214 <__aeabi_uldivmod>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b9a      	ldr	r3, [pc, #616]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2164      	movs	r1, #100	; 0x64
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	; 0x32
 8003c10:	4a95      	ldr	r2, [pc, #596]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1c:	4498      	add	r8, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	469b      	mov	fp, r3
 8003c22:	f04f 0c00 	mov.w	ip, #0
 8003c26:	46d9      	mov	r9, fp
 8003c28:	46e2      	mov	sl, ip
 8003c2a:	eb19 0309 	adds.w	r3, r9, r9
 8003c2e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c32:	4699      	mov	r9, r3
 8003c34:	46a2      	mov	sl, r4
 8003c36:	eb19 090b 	adds.w	r9, r9, fp
 8003c3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c52:	4689      	mov	r9, r1
 8003c54:	4692      	mov	sl, r2
 8003c56:	eb1b 0509 	adds.w	r5, fp, r9
 8003c5a:	eb4c 060a 	adc.w	r6, ip, sl
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4619      	mov	r1, r3
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	f04f 0400 	mov.w	r4, #0
 8003c70:	0094      	lsls	r4, r2, #2
 8003c72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	4631      	mov	r1, r6
 8003c80:	f7fc fac8 	bl	8000214 <__aeabi_uldivmod>
 8003c84:	4603      	mov	r3, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b77      	ldr	r3, [pc, #476]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	2164      	movs	r1, #100	; 0x64
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	4a72      	ldr	r2, [pc, #456]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4442      	add	r2, r8
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	e0d0      	b.n	8003e56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cb4:	f7ff f80c 	bl	8002cd0 <HAL_RCC_GetPCLK1Freq>
 8003cb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	469a      	mov	sl, r3
 8003cbe:	f04f 0b00 	mov.w	fp, #0
 8003cc2:	46d0      	mov	r8, sl
 8003cc4:	46d9      	mov	r9, fp
 8003cc6:	eb18 0308 	adds.w	r3, r8, r8
 8003cca:	eb49 0409 	adc.w	r4, r9, r9
 8003cce:	4698      	mov	r8, r3
 8003cd0:	46a1      	mov	r9, r4
 8003cd2:	eb18 080a 	adds.w	r8, r8, sl
 8003cd6:	eb49 090b 	adc.w	r9, r9, fp
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ce6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cee:	4688      	mov	r8, r1
 8003cf0:	4691      	mov	r9, r2
 8003cf2:	eb1a 0508 	adds.w	r5, sl, r8
 8003cf6:	eb4b 0609 	adc.w	r6, fp, r9
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f04f 0400 	mov.w	r4, #0
 8003d0c:	0094      	lsls	r4, r2, #2
 8003d0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d12:	008b      	lsls	r3, r1, #2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	4628      	mov	r0, r5
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	f7fc fa7a 	bl	8000214 <__aeabi_uldivmod>
 8003d20:	4603      	mov	r3, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b50      	ldr	r3, [pc, #320]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003d28:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	469b      	mov	fp, r3
 8003d36:	f04f 0c00 	mov.w	ip, #0
 8003d3a:	46d9      	mov	r9, fp
 8003d3c:	46e2      	mov	sl, ip
 8003d3e:	eb19 0309 	adds.w	r3, r9, r9
 8003d42:	eb4a 040a 	adc.w	r4, sl, sl
 8003d46:	4699      	mov	r9, r3
 8003d48:	46a2      	mov	sl, r4
 8003d4a:	eb19 090b 	adds.w	r9, r9, fp
 8003d4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d66:	4689      	mov	r9, r1
 8003d68:	4692      	mov	sl, r2
 8003d6a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d6e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0094      	lsls	r4, r2, #2
 8003d86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d8a:	008b      	lsls	r3, r1, #2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	4631      	mov	r1, r6
 8003d94:	f7fc fa3e 	bl	8000214 <__aeabi_uldivmod>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003da0:	fba3 1302 	umull	r1, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2164      	movs	r1, #100	; 0x64
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	3332      	adds	r3, #50	; 0x32
 8003db2:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbe:	4498      	add	r8, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	469b      	mov	fp, r3
 8003dc4:	f04f 0c00 	mov.w	ip, #0
 8003dc8:	46d9      	mov	r9, fp
 8003dca:	46e2      	mov	sl, ip
 8003dcc:	eb19 0309 	adds.w	r3, r9, r9
 8003dd0:	eb4a 040a 	adc.w	r4, sl, sl
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	46a2      	mov	sl, r4
 8003dd8:	eb19 090b 	adds.w	r9, r9, fp
 8003ddc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003df0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003df4:	4689      	mov	r9, r1
 8003df6:	4692      	mov	sl, r2
 8003df8:	eb1b 0509 	adds.w	r5, fp, r9
 8003dfc:	eb4c 060a 	adc.w	r6, ip, sl
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4619      	mov	r1, r3
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	f04f 0400 	mov.w	r4, #0
 8003e12:	0094      	lsls	r4, r2, #2
 8003e14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e18:	008b      	lsls	r3, r1, #2
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4623      	mov	r3, r4
 8003e1e:	4628      	mov	r0, r5
 8003e20:	4631      	mov	r1, r6
 8003e22:	f7fc f9f7 	bl	8000214 <__aeabi_uldivmod>
 8003e26:	4603      	mov	r3, r0
 8003e28:	460c      	mov	r4, r1
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2164      	movs	r1, #100	; 0x64
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	3332      	adds	r3, #50	; 0x32
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <UART_SetConfig+0x6f4>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4442      	add	r2, r8
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	e7ff      	b.n	8003e56 <UART_SetConfig+0x6e2>
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40011400 	.word	0x40011400
 8003e68:	51eb851f 	.word	0x51eb851f

08003e6c <main>:

uint16_t addr = 0x08;
uint16_t addr2 = 0x42;

int main(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e70:	f7fc fb50 	bl	8000514 <HAL_Init>



  /* Configure the system clock */
  SystemClock_Config();
 8003e74:	f000 f822 	bl	8003ebc <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e78:	f000 f936 	bl	80040e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003e7c:	f000 f8dc 	bl	8004038 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003e80:	f000 f908 	bl	8004094 <MX_USART2_UART_Init>

  	/* I2C receive and send using polling mode*/
	HAL_UART_Transmit(&huart2, (uint8_t*) "Online\n\r", 8, HAL_MAX_DELAY);
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <main+0x3c>)
 8003e8c:	4807      	ldr	r0, [pc, #28]	; (8003eac <main+0x40>)
 8003e8e:	f7ff fb8e 	bl	80035ae <HAL_UART_Transmit>
//	HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)"Damn!!!\r\n", 9, HAL_MAX_DELAY);
//	HAL_I2C_Master_Transmit(&hi2c1, addr2, (uint8_t*)"K", 1, HAL_MAX_DELAY);

	/*I2C sending and receiving using Interrupt mode*/

	while(Received != TRUE)
 8003e92:	e004      	b.n	8003e9e <main+0x32>
	{
		//HAL_UART_Transmit(&huart2, (uint8_t*)"In loop\r\n", 9, HAL_MAX_DELAY);
		HAL_I2C_Slave_Receive_IT(&hi2c1, &bit, 1);
 8003e94:	2201      	movs	r2, #1
 8003e96:	4906      	ldr	r1, [pc, #24]	; (8003eb0 <main+0x44>)
 8003e98:	4806      	ldr	r0, [pc, #24]	; (8003eb4 <main+0x48>)
 8003e9a:	f7fd f8e9 	bl	8001070 <HAL_I2C_Slave_Receive_IT>
	while(Received != TRUE)
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <main+0x4c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d1f6      	bne.n	8003e94 <main+0x28>
		//HAL_UART_Transmit(&huart2, (uint8_t*)".H\r\n", 4, HAL_MAX_DELAY);
	}


  while (1)
 8003ea6:	e7fe      	b.n	8003ea6 <main+0x3a>
 8003ea8:	080044e4 	.word	0x080044e4
 8003eac:	200000cc 	.word	0x200000cc
 8003eb0:	20000088 	.word	0x20000088
 8003eb4:	20000034 	.word	0x20000034
 8003eb8:	2000002c 	.word	0x2000002c

08003ebc <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b094      	sub	sp, #80	; 0x50
 8003ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ec2:	f107 031c 	add.w	r3, r7, #28
 8003ec6:	2234      	movs	r2, #52	; 0x34
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 faf6 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <SystemClock_Config+0xd0>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <SystemClock_Config+0xd0>)
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef0:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <SystemClock_Config+0xd0>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003efc:	2300      	movs	r3, #0
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <SystemClock_Config+0xd4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f08:	4a21      	ldr	r2, [pc, #132]	; (8003f90 <SystemClock_Config+0xd4>)
 8003f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b1f      	ldr	r3, [pc, #124]	; (8003f90 <SystemClock_Config+0xd4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f20:	2301      	movs	r3, #1
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f24:	2310      	movs	r3, #16
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f30:	2308      	movs	r3, #8
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003f34:	2332      	movs	r3, #50	; 0x32
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f40:	2302      	movs	r3, #2
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f44:	f107 031c 	add.w	r3, r7, #28
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff f889 	bl	8003060 <HAL_RCC_OscConfig>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003f54:	f000 f938 	bl	80041c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f58:	230f      	movs	r3, #15
 8003f5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003f6e:	f107 0308 	add.w	r3, r7, #8
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fdb9 	bl	8002aec <HAL_RCC_ClockConfig>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003f80:	f000 f922 	bl	80041c8 <Error_Handler>
  }
}
 8003f84:	bf00      	nop
 8003f86:	3750      	adds	r7, #80	; 0x50
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40007000 	.word	0x40007000

08003f94 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)"In callback\r\n", 13, HAL_MAX_DELAY);
	if(bit == '\r')
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_I2C_SlaveRxCpltCallback+0x8c>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b0d      	cmp	r3, #13
 8003fa2:	d130      	bne.n	8004006 <HAL_I2C_SlaveRxCpltCallback+0x72>
	{
		Received = TRUE;
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
		msg[i++] = '\r';msg[i++] = '\n';
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	491d      	ldr	r1, [pc, #116]	; (8004028 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8003fb2:	600a      	str	r2, [r1, #0]
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8003fb6:	210d      	movs	r1, #13
 8003fb8:	54d1      	strb	r1, [r2, r3]
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	4919      	ldr	r1, [pc, #100]	; (8004028 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8003fc2:	600a      	str	r2, [r1, #0]
 8003fc4:	4a19      	ldr	r2, [pc, #100]	; (800402c <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8003fc6:	210a      	movs	r1, #10
 8003fc8:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003fca:	4818      	ldr	r0, [pc, #96]	; (800402c <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8003fcc:	f7fc f91a 	bl	8000204 <strlen>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd8:	4914      	ldr	r1, [pc, #80]	; (800402c <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8003fda:	4815      	ldr	r0, [pc, #84]	; (8004030 <HAL_I2C_SlaveRxCpltCallback+0x9c>)
 8003fdc:	f7ff fae7 	bl	80035ae <HAL_UART_Transmit>
		HAL_I2C_Slave_Transmit(hi2c, (uint8_t*)"Gotchha!!\r\n", 11,HAL_MAX_DELAY);
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fe4:	220b      	movs	r2, #11
 8003fe6:	4913      	ldr	r1, [pc, #76]	; (8004034 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fc ff2b 	bl	8000e44 <HAL_I2C_Slave_Transmit>
		memset(&msg,0,sizeof(msg));
 8003fee:	2240      	movs	r2, #64	; 0x40
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	480e      	ldr	r0, [pc, #56]	; (800402c <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8003ff4:	f000 fa62 	bl	80044bc <memset>
		i = 0;
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
		Received = FALSE;
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		msg[i++] = bit;
	}
}
 8004004:	e008      	b.n	8004018 <HAL_I2C_SlaveRxCpltCallback+0x84>
		msg[i++] = bit;
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	4906      	ldr	r1, [pc, #24]	; (8004028 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 800400e:	600a      	str	r2, [r1, #0]
 8004010:	4a03      	ldr	r2, [pc, #12]	; (8004020 <HAL_I2C_SlaveRxCpltCallback+0x8c>)
 8004012:	7811      	ldrb	r1, [r2, #0]
 8004014:	4a05      	ldr	r2, [pc, #20]	; (800402c <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8004016:	54d1      	strb	r1, [r2, r3]
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000088 	.word	0x20000088
 8004024:	2000002c 	.word	0x2000002c
 8004028:	20000028 	.word	0x20000028
 800402c:	2000008c 	.word	0x2000008c
 8004030:	200000cc 	.word	0x200000cc
 8004034:	080044f0 	.word	0x080044f0

08004038 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0


  hi2c1.Instance = I2C1;
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <MX_I2C1_Init+0x50>)
 800403e:	4a13      	ldr	r2, [pc, #76]	; (800408c <MX_I2C1_Init+0x54>)
 8004040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <MX_I2C1_Init+0x50>)
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <MX_I2C1_Init+0x58>)
 8004046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <MX_I2C1_Init+0x50>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <MX_I2C1_Init+0x50>)
 8004050:	22aa      	movs	r2, #170	; 0xaa
 8004052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <MX_I2C1_Init+0x50>)
 8004056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800405a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <MX_I2C1_Init+0x50>)
 800405e:	2201      	movs	r2, #1
 8004060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 204;
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <MX_I2C1_Init+0x50>)
 8004064:	22cc      	movs	r2, #204	; 0xcc
 8004066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <MX_I2C1_Init+0x50>)
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <MX_I2C1_Init+0x50>)
 8004070:	2200      	movs	r2, #0
 8004072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004074:	4804      	ldr	r0, [pc, #16]	; (8004088 <MX_I2C1_Init+0x50>)
 8004076:	f7fc fdad 	bl	8000bd4 <HAL_I2C_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004080:	f000 f8a2 	bl	80041c8 <Error_Handler>
  }


}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000034 	.word	0x20000034
 800408c:	40005400 	.word	0x40005400
 8004090:	000186a0 	.word	0x000186a0

08004094 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <MX_USART2_UART_Init+0x50>)
 800409c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040ba:	220c      	movs	r2, #12
 80040bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <MX_USART2_UART_Init+0x4c>)
 80040cc:	f7ff fa22 	bl	8003514 <HAL_UART_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80040d6:	f000 f877 	bl	80041c8 <Error_Handler>
  }

}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200000cc 	.word	0x200000cc
 80040e4:	40004400 	.word	0x40004400

080040e8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4a2c      	ldr	r2, [pc, #176]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004108:	f043 0304 	orr.w	r3, r3, #4
 800410c:	6313      	str	r3, [r2, #48]	; 0x30
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	4a25      	ldr	r2, [pc, #148]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004128:	6313      	str	r3, [r2, #48]	; 0x30
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <MX_GPIO_Init+0xd0>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <MX_GPIO_Init+0xd0>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <MX_GPIO_Init+0xd0>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	6313      	str	r3, [r2, #48]	; 0x30
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <MX_GPIO_Init+0xd0>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800416e:	2200      	movs	r2, #0
 8004170:	2120      	movs	r1, #32
 8004172:	4812      	ldr	r0, [pc, #72]	; (80041bc <MX_GPIO_Init+0xd4>)
 8004174:	f7fc fd14 	bl	8000ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800417c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <MX_GPIO_Init+0xd8>)
 8004180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004186:	f107 0314 	add.w	r3, r7, #20
 800418a:	4619      	mov	r1, r3
 800418c:	480d      	ldr	r0, [pc, #52]	; (80041c4 <MX_GPIO_Init+0xdc>)
 800418e:	f7fc fb75 	bl	800087c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004192:	2320      	movs	r3, #32
 8004194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419e:	2300      	movs	r3, #0
 80041a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	4619      	mov	r1, r3
 80041a8:	4804      	ldr	r0, [pc, #16]	; (80041bc <MX_GPIO_Init+0xd4>)
 80041aa:	f7fc fb67 	bl	800087c <HAL_GPIO_Init>

}
 80041ae:	bf00      	nop
 80041b0:	3728      	adds	r7, #40	; 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	10210000 	.word	0x10210000
 80041c4:	40020800 	.word	0x40020800

080041c8 <Error_Handler>:


void Error_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0

}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_MspInit>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void HAL_MspInit(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_MspInit+0x54>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4a11      	ldr	r2, [pc, #68]	; (800422c <HAL_MspInit+0x54>)
 80041e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ec:	6453      	str	r3, [r2, #68]	; 0x44
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_MspInit+0x54>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_MspInit+0x54>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <HAL_MspInit+0x54>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6413      	str	r3, [r2, #64]	; 0x40
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_MspInit+0x54>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	683b      	ldr	r3, [r7, #0]

  //HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004216:	2200      	movs	r2, #0
 8004218:	210f      	movs	r1, #15
 800421a:	f06f 0001 	mvn.w	r0, #1
 800421e:	f7fc fac6 	bl	80007ae <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800

08004230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <HAL_I2C_MspInit+0xa4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d13c      	bne.n	80042cc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_I2C_MspInit+0xa8>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <HAL_I2C_MspInit+0xa8>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_I2C_MspInit+0xa8>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800426e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004274:	2312      	movs	r3, #18
 8004276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004278:	2301      	movs	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427c:	2303      	movs	r3, #3
 800427e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004280:	2304      	movs	r3, #4
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4619      	mov	r1, r3
 800428a:	4814      	ldr	r0, [pc, #80]	; (80042dc <HAL_I2C_MspInit+0xac>)
 800428c:	f7fc faf6 	bl	800087c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <HAL_I2C_MspInit+0xa8>)
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	4a0f      	ldr	r2, [pc, #60]	; (80042d8 <HAL_I2C_MspInit+0xa8>)
 800429a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800429e:	6413      	str	r3, [r2, #64]	; 0x40
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_I2C_MspInit+0xa8>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80042ac:	2200      	movs	r2, #0
 80042ae:	2105      	movs	r1, #5
 80042b0:	201f      	movs	r0, #31
 80042b2:	f7fc fa7c 	bl	80007ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80042b6:	201f      	movs	r0, #31
 80042b8:	f7fc fa95 	bl	80007e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80042bc:	2200      	movs	r2, #0
 80042be:	2105      	movs	r1, #5
 80042c0:	2020      	movs	r0, #32
 80042c2:	f7fc fa74 	bl	80007ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80042c6:	2020      	movs	r0, #32
 80042c8:	f7fc fa8d 	bl	80007e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80042cc:	bf00      	nop
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40005400 	.word	0x40005400
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020400 	.word	0x40020400

080042e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_UART_MspInit+0x84>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d12b      	bne.n	800435a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <HAL_UART_MspInit+0x88>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <HAL_UART_MspInit+0x88>)
 800430c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_UART_MspInit+0x88>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <HAL_UART_MspInit+0x88>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <HAL_UART_MspInit+0x88>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_UART_MspInit+0x88>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800433a:	230c      	movs	r3, #12
 800433c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433e:	2302      	movs	r3, #2
 8004340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004346:	2303      	movs	r3, #3
 8004348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800434a:	2307      	movs	r3, #7
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434e:	f107 0314 	add.w	r3, r7, #20
 8004352:	4619      	mov	r1, r3
 8004354:	4805      	ldr	r0, [pc, #20]	; (800436c <HAL_UART_MspInit+0x8c>)
 8004356:	f7fc fa91 	bl	800087c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800435a:	bf00      	nop
 800435c:	3728      	adds	r7, #40	; 0x28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40004400 	.word	0x40004400
 8004368:	40023800 	.word	0x40023800
 800436c:	40020000 	.word	0x40020000

08004370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004382:	e7fe      	b.n	8004382 <HardFault_Handler+0x4>

08004384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004388:	e7fe      	b.n	8004388 <MemManage_Handler+0x4>

0800438a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800438e:	e7fe      	b.n	800438e <BusFault_Handler+0x4>

08004390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004394:	e7fe      	b.n	8004394 <UsageFault_Handler+0x4>

08004396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043b2:	b480      	push	{r7}
 80043b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043c4:	f7fc f8f8 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043c8:	bf00      	nop
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80043d0:	4802      	ldr	r0, [pc, #8]	; (80043dc <I2C1_EV_IRQHandler+0x10>)
 80043d2:	f7fc febd 	bl	8001150 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000034 	.word	0x20000034

080043e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <I2C1_ER_IRQHandler+0x10>)
 80043e6:	f7fd f819 	bl	800141c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000034 	.word	0x20000034

080043f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <SystemInit+0x28>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	4a07      	ldr	r2, [pc, #28]	; (800441c <SystemInit+0x28>)
 8004400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <SystemInit+0x28>)
 800440a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800440e:	609a      	str	r2, [r3, #8]
#endif
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004426:	e003      	b.n	8004430 <LoopCopyDataInit>

08004428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800442a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800442c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800442e:	3104      	adds	r1, #4

08004430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004430:	480b      	ldr	r0, [pc, #44]	; (8004460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004432:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004438:	d3f6      	bcc.n	8004428 <CopyDataInit>
  ldr  r2, =_sbss
 800443a:	4a0b      	ldr	r2, [pc, #44]	; (8004468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800443c:	e002      	b.n	8004444 <LoopFillZerobss>

0800443e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800443e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004440:	f842 3b04 	str.w	r3, [r2], #4

08004444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004448:	d3f9      	bcc.n	800443e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800444a:	f7ff ffd3 	bl	80043f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800444e:	f000 f811 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004452:	f7ff fd0b 	bl	8003e6c <main>
  bx  lr    
 8004456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800445c:	08004524 	.word	0x08004524
  ldr  r0, =_sdata
 8004460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004464:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004468:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800446c:	2000010c 	.word	0x2000010c

08004470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004470:	e7fe      	b.n	8004470 <ADC_IRQHandler>
	...

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	4e0d      	ldr	r6, [pc, #52]	; (80044ac <__libc_init_array+0x38>)
 8004478:	4c0d      	ldr	r4, [pc, #52]	; (80044b0 <__libc_init_array+0x3c>)
 800447a:	1ba4      	subs	r4, r4, r6
 800447c:	10a4      	asrs	r4, r4, #2
 800447e:	2500      	movs	r5, #0
 8004480:	42a5      	cmp	r5, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	4e0b      	ldr	r6, [pc, #44]	; (80044b4 <__libc_init_array+0x40>)
 8004486:	4c0c      	ldr	r4, [pc, #48]	; (80044b8 <__libc_init_array+0x44>)
 8004488:	f000 f820 	bl	80044cc <_init>
 800448c:	1ba4      	subs	r4, r4, r6
 800448e:	10a4      	asrs	r4, r4, #2
 8004490:	2500      	movs	r5, #0
 8004492:	42a5      	cmp	r5, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800449c:	4798      	blx	r3
 800449e:	3501      	adds	r5, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a6:	4798      	blx	r3
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	0800451c 	.word	0x0800451c
 80044b0:	0800451c 	.word	0x0800451c
 80044b4:	0800451c 	.word	0x0800451c
 80044b8:	08004520 	.word	0x08004520

080044bc <memset>:
 80044bc:	4402      	add	r2, r0
 80044be:	4603      	mov	r3, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <_init>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr

080044d8 <_fini>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr
